name: Build and Release Installer for macOS

on:
  # 手动触发
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Enter the tag for the release (e.g., v1.0.0)'
        required: true
        default: ''

  # 自动触发：当代码合并到 master 分支时
  push:
    branches:
      - master

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: macos-latest

    steps:
    # 1. 检出代码
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. 获取最新的 tag
    - name: Get latest tag
      id: get_tag
      run: |
        git fetch --tags
        latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) || echo "v0.0.0")
        echo "Latest tag: $latest_tag"
        base_tag=$(echo "$latest_tag" | sed -E 's/(^v?[0-9]+\.[0-9]+\.[0-9]+).*/\1/')
        echo "Base tag: $base_tag"
        new_tag="$base_tag.dev"
        echo "Generated new tag: $new_tag"
        echo "tag_name=$new_tag" >> $GITHUB_ENV

    # 3. 设置手动触发时的 tag_name
    - name: Set manual tag_name
      if: ${{ github.event_name == 'workflow_dispatch' }}
      run: echo "tag_name=${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV

    # 4. 设置 Python 环境
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    # 5. 安装 Python 依赖
    - name: Install dependencies
      run: |
        python3 -m pip install -r requirements_unix.txt
        python3 -m pip install pyinstaller

    # 6. 手动复制 macOS 依赖文件
    - name: Copy DLL or other dependencies for PyInstaller
      run: |
        ls /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/azure/cognitiveservices/speech/
        dll_path=$(python -c "import azure.cognitiveservices.speech; import os; print(os.path.join(os.path.dirname(azure.cognitiveservices.speech.__file__), 'libMicrosoft.CognitiveServices.Speech.core.dylib'))")
        mkdir -p azure/cognitiveservices/speech
        cp "$dll_path" "azure/cognitiveservices/speech/"
    # 7. 打包 Python 项目为 macOS 可执行文件
    - name: Build executable with PyInstaller
      run: |
        pyinstaller --onefile --windowed --add-data azure/cognitiveservices/speech/libMicrosoft.CognitiveServices.Speech.core.dylib:azure/cognitiveservices/speech --add-data locales:locales --hidden-import azure.cognitiveservices.speech --name pptflow main.py

    # 8. 创建 pkg 安装包
    - name: Create Pkg
      run: |
        pkgbuild --root dist --identifier com.archworks.pptflow --install-location /Applications dist/pptflow-${{ env.tag_name }}.pkg
    # 9. 创建 GitHub Release
    - name: Check if release already exists
      id: check_release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 配置 GitHub Token
      run: |
        release_info=$(gh release view "${GITHUB_REPOSITORY}@${tag_name}" --json uploadUrl -q ".uploadUrl" 2>/dev/null)
    
        if [ -n "$release_info" ]; then
          echo "Release already exists, upload_url: $release_info"
          echo "upload_url=$release_info" >> $GITHUB_ENV
        else
          echo "Release not found"
          echo "upload_url=null" >> $GITHUB_ENV
        fi

    - name: Create Release
      if: ${{ env.upload_url == 'null' }}
      id: create_release
      uses: actions/create-release@v1.1.4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.tag_name }}
        release_name: Release ${{ env.tag_name }}
        body: |
          **Changelog:**
          - Auto-generated macOS release
        draft: false
        prerelease: ${{ github.event_name != 'workflow_dispatch' }}

    - name: Get final upload_url
      id: get_upload_url
      run: |
        if [ "$upload_url" = "null" ]; then
          echo "upload_url=${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_ENV
        else
          echo "upload_url=$upload_url" >> $GITHUB_ENV
        fi
      env:
        upload_url: ${{ env.upload_url }}

    # 10. 上传安装包到 GitHub Releases
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: "dist/pptflow-${{ env.tag_name }}.pkg"
        asset_name: "pptflow-${{ env.tag_name }}.pkg"
        asset_content_type: application/octet-stream
