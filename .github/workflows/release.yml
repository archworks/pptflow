name: Build and Release Installer

on:
  workflow_dispatch:  # 仅手动触发
    inputs:
      tag_name:
        description: 'Select a tag for the release'  # 输入描述
        required: true
        default: ''  # 默认为空，需手动选择或填写

permissions:
  contents: write  # 允许创建、上传 Release

jobs:
  build-and-release:
    runs-on: windows-latest  # 使用 Windows 环境

    steps:
    # 1. 检出代码
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. 设置 Python 环境
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9  # 替换为你的 Python 版本

    # 3. 安装 Python 依赖
    - name: Install dependencies
      run: |
        pip install -r requirements_win.txt
        pip install pyinstaller

    # 4. 手动复制 DLL 文件
    - name: Copy DLL file for PyInstaller
      run: |
        mkdir -p azure/cognitiveservices/speech
        copy "C:\hostedtoolcache\windows\Python\3.9.13\x64\Lib\site-packages\azure\cognitiveservices\speech\Microsoft.CognitiveServices.Speech.core.dll" "azure/cognitiveservices/speech/"

    # 5. 打包 Python 项目为可执行文件
    - name: Build executable with PyInstaller
      run: |
        pyinstaller --onefile --add-data "azure/cognitiveservices/speech/Microsoft.CognitiveServices.Speech.core.dll;azure/cognitiveservices/speech" --add-data "locales;locales" --noconsole --hidden-import azure.cognitiveservices.speech main.py --name pptflow

    # 6. 安装 Chocolatey
    - name: Install Chocolatey
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force;
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

    # 7. 使用 Chocolatey 安装 Inno Setup
    - name: Install Inno Setup using Chocolatey
      run: choco install innosetup

    # 8. 验证输入的 tag 是否有效
    - name: Validate tag
      id: validate_tag
      run: |
        if ("${{ github.event.inputs.tag_name }}" == "" ){
          echo "Error: tag_name input is empty."
          exit 1
        }
        echo "Tag: ${{ github.event.inputs.tag_name }}"

    # 9. 使用 Inno Setup 打包为安装包
    - name: Build installer
      run: |
        iscc /dMyAppVersion=${{ github.event.inputs.tag_name }} installer.iss

    # 10. 创建 GitHub Release
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.1.4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.tag_name }}
        release_name: Release ${{ github.event.inputs.tag_name }}
        body: |
          **Changelog:**
          - Auto-generated release
        draft: false
        prerelease: false

    # 11. 上传安装包到 GitHub Releases
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: "output/pptflow-${{ github.event.inputs.tag_name }}.exe"
        asset_name: "pptflow-${{ github.event.inputs.tag_name }}.exe"
        asset_content_type: application/octet-stream
